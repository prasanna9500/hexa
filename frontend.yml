#### CFT for Frontend resources ####
AWSTemplateFormatVersion: 2010-09-09
Description: Static website hosting with S3 and CloudFront
### Declaring Parameter ##### 
Parameters:
  StageName:
    Type: String
  AlternateDomainNames1:
    Description: >-
      CNAMEs (alternate domain names), if any, for the distribution. Example.
      mydomain.com
    Type: String
  AlternateDomainNames2:
    Description: >-
      CNAMEs (alternate domain names), if any, for the distribution. Example.
      mydomain.com
    Type: String
  AlternateDomainNames3:
    Description: >-
      CNAMEs (alternate domain names), if any, for the distribution. Example.
      mydomain.com
    Type: String
  AlternateDomainNames4:
    Description: >-
      CNAMEs (alternate domain names), if any, for the distribution. Example.
      mydomain.com
    Type: String
  AlternateDomainNames5:
    Description: >-
      CNAMEs (alternate domain names), if any, for the distribution. Example.
      mydomain.com
    Type: String     
  DomainName:
    Description: Domain name of website
    Type: String
    Default: indeez.me
    AllowedValues:
      - indeez.me
      - indeez.eu
### Conditions for Domain name selection ####      
Conditions:
  CreateMEResources: !Equals 
    - !Ref DomainName
    - indeez.me
  CreateEUResources: !Equals 
    - !Ref DomainName
    - indeez.eu
#### Cloud Fron-including hosting bucket ######    
#########ADMIN-APP###############    
Resources:
  S3Bucket1:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StageName}-admin.indeez'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  CloudFrontOriginAccessIdentity1:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket1
  ReadPolicy1:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket1
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket1}/*'
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity1.S3CanonicalUserId
  CloudFrontDistribution1:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames1
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub '${S3Bucket1}.s3.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket1}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity1}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket1}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 400
            ResponsePagePath: /index.html
            ResponseCode: '400'
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: '403'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: '404'
            ErrorCachingMinTTL: 10
          - ErrorCode: 502
            ResponsePagePath: /index.html
            ResponseCode: '502'
            ErrorCachingMinTTL: 10
        Comment: ''
        PriceClass: PriceClass_All
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !If [CreateMEResources, arn:aws:acm:us-east-1:838385783381:certificate/cea0d450-b77c-4a1d-8944-d5e7265ab813, arn:aws:acm:us-east-1:838385783381:certificate/04b360b4-fb90-4c35-86fe-02ee9acae887]
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/VPN_Support_Dev/9bbf07d8-e200-4a5d-8e71-48f2dd60b48c"    
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
  Route53RecordSet1:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref AlternateDomainNames1
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt 
          - CloudFrontDistribution1
          - DomainName
        EvaluateTargetHealth: false
      HostedZoneId: !If [CreateMEResources, Z0396871JIX65Z1AKLOO, Z0139070TG2NZJYGB50U]
#########CUSTOMER-APP###############    
  S3Bucket2:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StageName}-customer.indeez'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  CloudFrontOriginAccessIdentity2:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket2
  ReadPolicy2:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket2
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket2}/*'
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity2.S3CanonicalUserId
  CloudFrontDistribution2:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames2
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub '${S3Bucket2}.s3.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket2}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity2}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket2}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 400
            ResponsePagePath: /index.html
            ResponseCode: '400'
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: '403'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: '404'
            ErrorCachingMinTTL: 10
          - ErrorCode: 502
            ResponsePagePath: /index.html
            ResponseCode: '502'
            ErrorCachingMinTTL: 10
        Comment: ''
        PriceClass: PriceClass_All
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !If [CreateMEResources, arn:aws:acm:us-east-1:838385783381:certificate/cea0d450-b77c-4a1d-8944-d5e7265ab813, arn:aws:acm:us-east-1:838385783381:certificate/04b360b4-fb90-4c35-86fe-02ee9acae887]
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/VPN_Support_Dev/9bbf07d8-e200-4a5d-8e71-48f2dd60b48c"            
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
  Route53RecordSet2:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref AlternateDomainNames2
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt 
          - CloudFrontDistribution2
          - DomainName
        EvaluateTargetHealth: false
      HostedZoneId: !If [CreateMEResources, Z0396871JIX65Z1AKLOO, Z0139070TG2NZJYGB50U]
#########PARTNER-APP###############      
  S3Bucket3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StageName}-partner.indeez'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  CloudFrontOriginAccessIdentity3:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket3
  ReadPolicy3:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket3
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket3}/*'
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity3.S3CanonicalUserId
  CloudFrontDistribution3:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames3
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub '${S3Bucket3}.s3.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket3}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity3}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket3}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 400
            ResponsePagePath: /index.html
            ResponseCode: '400'
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: '403'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: '404'
            ErrorCachingMinTTL: 10
          - ErrorCode: 502
            ResponsePagePath: /index.html
            ResponseCode: '502'
            ErrorCachingMinTTL: 10
        Comment: ''
        PriceClass: PriceClass_All
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !If [CreateMEResources, arn:aws:acm:us-east-1:838385783381:certificate/cea0d450-b77c-4a1d-8944-d5e7265ab813, arn:aws:acm:us-east-1:838385783381:certificate/04b360b4-fb90-4c35-86fe-02ee9acae887]
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/VPN_Support_Dev/9bbf07d8-e200-4a5d-8e71-48f2dd60b48c"            
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
  Route53RecordSet3:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref AlternateDomainNames3
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt 
          - CloudFrontDistribution3
          - DomainName
        EvaluateTargetHealth: false
      HostedZoneId: !If [CreateMEResources, Z0396871JIX65Z1AKLOO, Z0139070TG2NZJYGB50U]
##########TPA-APP#################      
  S3Bucket4:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StageName}-tpa.indeez'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  CloudFrontOriginAccessIdentity4:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket4
  ReadPolicy4:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket4
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket4}/*'
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity4.S3CanonicalUserId
  CloudFrontDistribution4:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames4
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub '${S3Bucket4}.s3.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket4}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity4}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket4}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 400
            ResponsePagePath: /index.html
            ResponseCode: '400'
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: '403'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: '404'
            ErrorCachingMinTTL: 10
          - ErrorCode: 502
            ResponsePagePath: /index.html
            ResponseCode: '502'
            ErrorCachingMinTTL: 10
        Comment: ''
        PriceClass: PriceClass_All
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !If [CreateMEResources, arn:aws:acm:us-east-1:838385783381:certificate/cea0d450-b77c-4a1d-8944-d5e7265ab813, arn:aws:acm:us-east-1:838385783381:certificate/04b360b4-fb90-4c35-86fe-02ee9acae887]
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/VPN_Support_Dev/9bbf07d8-e200-4a5d-8e71-48f2dd60b48c"            
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
  Route53RecordSet4:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref AlternateDomainNames4
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt 
          - CloudFrontDistribution4
          - DomainName
        EvaluateTargetHealth: false
      HostedZoneId: !If [CreateMEResources, Z0396871JIX65Z1AKLOO, Z0139070TG2NZJYGB50U]
 ############TPL-APP###################     
  S3Bucket5:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${StageName}-tpl.indeez'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  CloudFrontOriginAccessIdentity5:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref S3Bucket5
  ReadPolicy5:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket5
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket5}/*'
            Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity5.S3CanonicalUserId
  CloudFrontDistribution5:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref AlternateDomainNames5
        Origins:
          - ConnectionAttempts: 3
            ConnectionTimeout: 10
            DomainName: !Sub '${S3Bucket5}.s3.${AWS::Region}.amazonaws.com'
            Id: !Sub '${S3Bucket5}.s3.${AWS::Region}.amazonaws.com'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity5}
        OriginGroups:
          Quantity: 0
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub '${S3Bucket5}.s3.${AWS::Region}.amazonaws.com'
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 400
            ResponsePagePath: /index.html
            ResponseCode: '400'
            ErrorCachingMinTTL: 10
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: '403'
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: '404'
            ErrorCachingMinTTL: 10
          - ErrorCode: 502
            ResponsePagePath: /index.html
            ResponseCode: '502'
            ErrorCachingMinTTL: 10
        Comment: ''
        PriceClass: PriceClass_All
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !If [CreateMEResources, arn:aws:acm:us-east-1:838385783381:certificate/cea0d450-b77c-4a1d-8944-d5e7265ab813, arn:aws:acm:us-east-1:838385783381:certificate/04b360b4-fb90-4c35-86fe-02ee9acae887]
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        WebACLId: !Sub "arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/VPN_Support_Dev/9bbf07d8-e200-4a5d-8e71-48f2dd60b48c"            
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
  Route53RecordSet5:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Ref AlternateDomainNames5
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt 
          - CloudFrontDistribution5
          - DomainName
        EvaluateTargetHealth: false
      HostedZoneId: !If [CreateMEResources, Z0396871JIX65Z1AKLOO, Z0139070TG2NZJYGB50U]      
